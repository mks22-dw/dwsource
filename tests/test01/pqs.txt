
=======================
Question 0:
by: 09/abraham.max:

=
Programming question:

Description
Make a function that take a list and replaces every element with "banana".
Possible solution:
=======================
=======================
Question 1:
by: 09/aranda.eleanor:

=
Programming question:

Create a function that squares each number in the list using a for loop. If there is a multiple of five in the list, return 'bingo' instead of squaring the number. Assume all items in the list are numbers. 

Possible solution:
=======================
=======================
Question 2:
by: 09/asaf.samaun:

=
Programming question: Let g =
[1, 3, 7, 8, 10, 15, 32, 41, 52], using a for loop, make a new list consisting of all the even numbers from the original list.

Description

Possible solution:
=======================
=======================
Question 3:
by: 09/caal.daniel:

=
Programming question: 

Write a function that takes a list of list of strings of lowercase letters
that returns the list with every element of every other list capitalized.
[['a', 'b', 'c'], ['d', 'e', 'f'], ['j', 'k', 'l']]

Possible solution:
=======================
=======================
Question 4:
by: 09/chan.janice:

=
Programming question:

Write a function that returns the largest element in a list using a for loop.

Possible solution:
=======================
=======================
Question 6:
by: 09/chen.michelle:

=
Programming question:

Create a list that adds all the even numbers in a list.

Possible solution:
=======================
=======================
Question 7:
by: 09/cheng.alvin:

=
Programming question:

Write a function that takes a list of lists of strings,
that returns the list with every element of the list
with every other list capitalized assuming the strings
contain lower case letters. 
ex: [['a', 'b', 'c', 'd'], ['e', 'f', 'g', 'h'], ['i', 'j', 'k', 'l']]
--> [['A', 'B', 'C', 'D'], ['e', 'f', 'g', 'h'], ['I', 'J', 'K', 'L']]
Possible solution:
=======================
=======================
Question 8:
by: 09/codner.justin:

=
Programming question:

Write the function that returns the least common multiple of a list lcmList(g)

Possible solution:
=======================
=======================
Question 9:
by: 09/gao.sandra:

=
Programming question:

Write a function that returns the count of consonents in a given word (y is a consonent). assume the string of the given word is all in lowercase.

Possible solution:
=======================
=======================
Question 10:
by: 09/hossain.shihab:

=
Programming question: 

Create a list that contains the length of each fast food resturaunt names. 

Description

Use this list of fast food resturaunts.
resturaunts = ['McDonalds', 'Five Guys', 'Chic fil a', 'Wendys', 'Dunkin Donuts']

Possible solution:
=======================
=======================
Question 11:
by: 09/hsieh.naomi:

=
Programming question:

Given a list of strings, return a string that counts the amount of times each item appears in the format "string : count" on seperate lines.

E.g.
Input:
["a", "b", "a", "c", "c", "a"]

Output:
a : 3
b : 1
c : 2

Possible solution:
=======================
=======================
Question 12:
by: 09/hu.hugo:

=
Programming question:

Write a function that sums all the even numbers of a list. You may assume the input list consists solely of integers. 

Description

Possible solution:
=======================
=======================
Question 13:
by: 09/huang.hangqi:

=
Programming question:
Write a function that returns a list of all the dates of a certain day of the week in a month.

Description:
The parameters should be (a, b), where a is the day of the week that the 7th of the month lands on, and b the day of the weeks that's being asked for.
Assume all months are 31 days.
Monday would be 1, Tuesday 2, and so on.
Example: days_of_month(7, 7) ----> [7, 14, 21, 28]

Possible solution:
def days_of_month(a, b):
    if a > b:
        i = 7 - (a - b)
    elif a < b:
        i = abs(a - b)
    else:
        i = 7
    n = []
    while i <= 31:
        n += [i]
        i += 7
    return n

=======================
=======================
Question 14:
by: 09/huang.matthew:

=
Programming question: Let g =
[1, 3, 7, 8, 10, 15, 32, 41, 52], using a for loop, make a new list consisting of all the even numbers from the original list.

Description

Possible solution:
=======================
=======================
Question 16:
by: 09/leahy.alexa:

=
Programming question:

Description
Given the list ['banana pudding', 'apple pie', 'blueberry tart', 'lemon meringue', 'strawberry cake'], print the second word of each desert.
Possible solution:
=======================
desserts = ['banana pudding', 'apple pie', 'blueberry tart', 'lemon meringue', 'strawberry cake']
second_word = list(map(lambda s: s[s.find(' ')+1:], desserts))
print (second_word)
=======================
Question 17:
by: 09/mercone.lucia:

=
Programming question:
Given the list ['eggplant pizza', 'zucchini LIQUID', 'tomato pie', 'potato soup'] create a list with only the first element of each element with 'soup' at the end of the new phrase.

Possible solution:
g = ['eggplant pizza', 'zucchini LIQUID', 'tomato pie', 'potato soup']
unlist = list (map (lambda e: e[0:e.find (' ') + 1] + 'soup', g))
print (unlist)


=======================
=======================
Question 19:
by: 09/pan.jamie:

=
Programming question:
Write a function named twentyShift that "moves" (adds) 20 to each number in that list. 

Description
For each element of list g, add 20 to that value. This function should return a list. 

Possible solution:

def twentyShift (g):
    n = []
    for x in g:
        n.append(x + 20)
    return n
=======================
=======================
Question 20:
by: 09/pavlov.lucas:

=
Programming question: 
Write a function that returns the largest element of a list using a for loop
Description

Possible solution:
=======================
=======================
Question 21:
by: 09/rong.yanghao:

=
Programming question:

Write a function called numA that will take 1 parameter, a list, and this will return the number of "a" and "A" in your given list. 

Possible solution:
=======================
=======================
Question 22:
by: 09/sunko.sam:

=
Programming question:

Write two functions that each return a list with all the second words of the 2-word strings given.
One should use for and string splicing, while the other should use map.
Example:

>>> second_wordsVfor(["Hello There", "Boo Hoo"])
    
    ["There", "Hoo"]
    
>>> second_wordsVmap(["Hello There", "Boo Hoo"])
    
    ["There", "Hoo"]

Possible solution:
=======================
=======================
Question 23:
by: 09/tam.iris:

h of the following lines would return the sum of all numbers in a list?

Options:
A) list(map(lambda a,b:a+b, numList))
B) list(reduce(lambda a,b:a+b, numList))
C) map(lambda a,b:a+b, numList)
D) reduce(lambda a,b:a+b, numList)

Answer: D

==================
Programming question:

fishlist=['anchovy','bass','bluefish','carp','catfish','cod','crayfish','flounder','grouper','haddock','halibut','herring','mackerel','marlin','perch','pollock','sablefish','salmon','sardine','snapper','swordfish','tilapia','tilefish','tuna','whitefish']
Given this list, write a line of code that returns a list of only fish with the word 'fish' in their name. Use the function filter.

Possible solution:
==================
=======================
Question 24:
by: 09/vaca.ruby:

=
Programming question:
Return onlt the capital letters in a string using filter
Description

Possible solution:
=======================
=======================
Question 25:
by: 09/wang.kristy:

=
Programming question:

Description
Write the function that returns the least common mulitple of a list lcmList(g)
Possible solution:
=======================
=======================
Question 26:
by: 09/wongthep.thanapol:

=
Programming question:
Write a function that takes in a list and adds 1 to every odd number in g without changing the numbers' index
Note that the while function shouldn't be used.

g = [2, 4, 1, 3, 2, 2, 4, 8, 10, 5, 7]

Possible solution:
=======================
=======================
Question 27:
by: 09/yang.derek:

=
Programming question:

Given a list of strings, return a string that counts the amount of
times each item appears in the format "string : count" on seperate lines.

E.g.
Input:
["a", "b", "a", "c", "c", "a"]

Output:
a : 3
b : 1
c : 2

Possible solution:
=======================
=======================
Question 28:
by: 09/zhou.andy:

=
Programming question:

Write a function using the "for" loop that:
    1. Multiples each index to the index immmediately if the index isn't the final.
    2. For the final value, multiply itself by itself.
    3. It should not return as a list, but rather printed values.
List to use: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Possible solution:
=======================
=======================
Question 29:
by: 09/zou.sarah:

=
Programming question:

Given the list:
g = [0, "apple", 0, "apples", 0, "big apples"]

Write a function that replaces every x in the list with
1, 2, and 3, respectively.

Description:
Hint - Should for or while be used?
Should return [1, 'apple', 2, 'apples', 3, 'big apples']

Possible solution:
=======================
=======================
Question 30:
by: 09/zukof.hayato:

=
Programming question: Write a function that fliters out all of the letters of the
following list and returns a list with all of the numbers.

['hello', 'hi', 3247, 'goodmorning', 230948, 1920, 'bye']

Description

Possible solution:
=======================
=======================
Question 31:
by: 10/agge.maya:

=
Programming question: Write a function that splits a two word string in half

Description: Function using while, if, and else to split a two word string into two separate strings


Possible solution:
def two_word_split(s):
  split_up = ''
  space_between_words = s.find(' ")
  i = 0
  while(i < len(s)):
    if(i == space_between_words):
      split_up += "\n"
    else:
      split_up += s[i]
    i += 1
  return split_up
=======================
=======================
Question 32:
by: 10/ashie.angelina:

=
Programming question: Write a function that splits a two word string in half.  

Description: Function using while, if, and else to split a two word string into two seperate strings.

Possible solution:
def two_word_split(s):
    split_up = ''
    space_between_words = s.find(' ')
    i = 0
    while (i < len(s)):
        if (i == space_between_words):
            split_up+= '\n'
        else:
            split_up+= s[i]
        i+= 1
    return split_up

print('two_word_split test:')
print(two_word_split ("High School"))
=======================
=======================
Question 33:
by: 10/carvallo.eva:

=
Programming question:
Create a function called firstLast that has one paramter: a list containing strings.
The function will take the first and last letter of each string, combine them,
and return a list with those values.

Description: See above!

Possible solution:
=======================
def firstLast(s):
    index = 0
    newList = []
    while index < len(s):
        a = s[index]
        newItem = a[0] + a[len(a) - 1]
        newList.append(newItem)
        index += 1
    return newList
       
g = ['have fun' , 'bye' , 'greetings' , 'hey']
print(firstLast(g))
=======================
Question 34:
by: 10/chae.nate:

=
Programming question:
Write a function which takes in two arguments, a string and a list (of strings), which returns the amount of values in the list which are *not* the given string.

Possible solution:
=======================
=======================
Question 35:
by: 10/chen.angelo:

=
Programming question:

Write a function, myRange, that takes a list and prints the range of the list (largest value - smallest value)

Possible solution:
=======================
=======================
Question 36:
by: 10/chen.catherine:

=
Programming question:

Create a list that contains only fruit names that are less than 6 characters long.
fruits = ['apple', 'strawberry', 'banana', 'peach', 'pear']

Possible solution:
=======================
=======================
Question 37:
by: 10/chen.serena:

=
Programming question:
(a) Write a function that takes a string and returns a new string with the last occurence of n and everything after it. 

Description:
E.g.
g = 'wkefkkjhg2937ykwefj]
n = 'k'
foo(n, g) -> 'kwefj'

Possible solution:
=======================
=======================
Question 38:
by: 10/chin.benjamin:

=
Programming question:
Write a function that takes in a list of two word names as parameters and returns a reversed list of all the first names
Description
If Billy Bob is the first index of the original list then the last index of the new list should be Billy
Possible solution:
=======================
=======================
Question 39:
by: 10/cimpoiesu.alex:

=
Programming question:

For a list return all the numbers divisible by 5 in it.

Possible solution:
=======================
=======================
Question 42:
by: 10/hou.kenneth:

=
Programming question:
Write a function that returns a list containing the number of times the letter 'a' appears in each index for list L.
L = ['fishy fish', 'baaaaa', 'flappy bard']

Description

Possible solution:
=======================
=======================
Question 43:
by: 10/hu.brandon:

=
Programming question:
Create a function that takes a string and returns
a list that has the string
from the first appearence of an upper case
onward. Separate each character into
its own element in the list
If an upper case doesn't appear, return
an empty string.
ex: 'didyouSayhi' --> ['a', 'y', 'h', 'i']

The list should not include the upper case itself.
Use string slicing and a for loop

Possible solution:

def upperend(string):
    n = 0
    i = 0
    while i + 1 <= len(string):
        if n == 0:
            if string[i] >= 'A' and string[i] <= 'Z':
                n = i
                i += 1
            else:
                i += 1
        else:
            i += 1
    newstring = string[n + 1:]
    l = []
    for a in newstring:
        l.append(a)
    return l

print(upperend('didyouSayhi'), "expected: ['a', 'y', 'h', 'i']")
=======================
=======================
Question 45:
by: 10/lee.yuna:

=
Programming question: Write a function that counts the number of names starting with your chosen letter in a list.

Description:
['James', 'Robert', 'John', 'Michael', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']
def count_letter(x,g)
x would be a single  capital chracter string and g would be the list of names above.

Possible solution:

names = ['James', 'Robert', 'John', 'Michael', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']

def count_letter(x,g):
    new = 0
    for e in g:
        if e[0] == x:
            new += 1
    print(new)

=======================
=======================
Question 47:
by: 10/lin.gavin:

=
Programming question:
For a list, return all numbers divisible by 5.

Possible solution:
=======================
=======================
Question 48:
by: 10/lin.sean:

=
Programming question: Write a function that counts the number of names starting with your chosen letter  in a list.

Description:
['James', 'Robert', 'John', 'Micheal', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']
def count_letter(x,g)
x would be a single  capital chracter string and g would be the list of names above.

Possible solution:

names = ['James', 'Robert', 'John', 'Micheal', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']

def count_letter(x,g):
    new = 0
    for e in g:
        if e[0] == x:
            new += 1
    print(new)

=======================
=======================
Question 49:
by: 10/liu.evelyn:

=
Programming question:

Given a list of integers, use filter to create a new list of the even integers.
Then, use reduce to find the sum of the elements of the new list. (The original list is called g.)

Possible solution:
=======================
=======================
Question 50:
by: 10/liu.simon:

=
Programming question:

Description
Write a function convolutedRange that takes a list of lists and finds the range of the lists overall (largest number out of all the lists - smallest number out of all the lists).

Possible solution:
def convolutedRange(l):
    base_list = l[0]
    beeg = base_list[0]
    smol = base_list[0]
    for x in l:
        for e in x:
            if e > beeg:
                beeg = e
            if e < smol:
                smol = e
    return beeg - smol
example = [ [23, 57, 48], [1, 5, 7], [87, 91, 3] ]
print(convolutedRange(example))
=======================
=======================
Question 51:
by: 10/naveed.fatima:

=
Programming question: Write a program that replaces the world "hate" with the word "love" in a given string. The program should be called hate_love.

Description

Possible solution:

def hate_love(s):
    words = s.split()
    replace = [word if word != "hate" else "love" for word in words]
    return " ".join(replace)

=======================
=======================
Question 52:
by: 10/pisareva.sofia:

=
Programming question:

Write a Python function called 'reverse_string' that takes a string as input and returns the reversed version of that string.

Possible solution: 
def reverse_string(s):
    return s[::-1]
=======================
=======================
Question 54:
by: 10/seidenberg.somerset:

=
Programming question:
use string slicing to create a function that takes one parameter, a name (assume two words), and switches the order such that the last name comes before the first

Description

Possible solution:
=======================
=======================
Question 55:
by: 10/shahab.navid:

=
Programming question: Create a function that takes a string and returns a list that has the string
from the first appearence of an upper case onward. Separate each character into its own element in the list
If an upper case doesn't appear, return an empty string.
ex: 'didyouSayhi' --> ['a', 'y', 'h', 'i']

Description: The list should not include the upper case itself.
Use string slicing and a for loop

Possible solution:

def upperend(string):
    n = 0
    i = 0
    while i + 1 <= len(string):
        if n == 0:
            if string[i] >= 'A' and string[i] <= 'Z':
                n = i
                i += 1
            else:
                i += 1
        else:
            i += 1
    newstring = string[n + 1:]
    l = []
    for a in newstring:
        l.append(a)
    return l

print(upperend ('didyouSayht'), "expected: la, yoh, 'i'l'
=======================
=======================
Question 56:
by: 10/stahl.axel:

=
Programming question:

write a function remove names formated like "First Last" from a list of names.

Description
given a list of name, return the list without names formatted like "First Last"

Possible solution:
=======================
=======================
Question 57:
by: 10/titievsky.leo:

=
Programming question:

Write a Python function called 'reverse_string' that takes a string as input and returns the reversed version of that string.

Possible solution: 
def reverse_string(s):
    return s[::-1]
=======================
=======================
Question 58:
by: 10/vaithilingam.aruna:

=
Programming question:
Create a function called firstLast that has one paramter: a list containing strings.
The function will take the first and last letter of each string, combine them,
and return a list with those values.

Description: See above!

Possible solution:
=======================

def firstLast(s):
    index = 0
    newList = []
    while index < len(s):
        a = s[index]
        newItem = a[0] + a[len(a) - 1]
        newList.append(newItem)
        index += 1
    return newList
        
g = ['have fun' , 'bye' , 'greetings' , 'hey']
print(firstLast(g))
=======================
Question 60:
by: 10/xiao.steven:

=
Programming question:

Write a function that takes in a list of strings
Returns a list with all the strings spelled backwards

(The order of the list doesn't have to be backwards)
ie:
['Hello', 'World', 'Exclamation Mark'] the input
should return:
['olleH', 'dlroW', 'kraM noitamalcxE']
=======================
=======================
Question 61:
by: 10/yarden.ben:

=
Programming question: Make a function that takes a list of numbers and returns a list with each of the values halved


Possible solution:

def halfify(l):
    nl = []
    for x in l:
        nl.append(x/2)
    return nl
=======================
=======================
Question 62:
by: 10/yee.estella:

=
Programming question:
(a) Write a function that takes a string and returns a new string with the last occurance of n and everything after it. 

Description:
E.g.
g = 'wkefkkjhg2937ykwefj]
n = 'k'
foo(n, g) -> 'kwefj'

Possible solution:
=======================
=======================
Question 63:
by: 10/zheng.ricky:

=
Programming question: Write a function that counts the number of names starting with your chosen letter  in a list.

Description:
['James', 'Robert', 'John', 'Micheal', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']
def count_letter(x,g)
x would be a single  capital chracter string and g would be the list of names above.

Possible solution:

names = ['James', 'Robert', 'John', 'Micheal', 'Brian', 'David', 'Barbara', 'Douglas', 'Lawrence', 'Mason']

def count_letter(x,g):
    new = 0
    for e in g:
        if e[0] == x:
            new += 1
    print(new)

=======================